package com.ivanasen.smarttickets.contractwrappers;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.EventValues;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.DynamicBytes;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.abi.datatypes.generated.Uint8;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple5;
import org.web3j.tuples.generated.Tuple6;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import rx.Observable;
import rx.functions.Func1;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 3.2.0.
 */
public class SmartTickets extends Contract {
    private static final String BINARY = "0x606060405260008060146101000a81548160ff021916908315150217905550732cde56e5c8235d6360ccbb0c57ce248ca9c80909600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600060085534156200008457600080fd5b6200008e6200040e565b6200009862000442565b336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555033600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555033600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555033600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506001600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550620001fd62000475565b604051809103906000f08015156200021457600080fd5b600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550608060405190810160405280600081526020016020604051908101604052806000815250815260200160008152602001600060ff168152509150600b8054806001018281620002a4919062000486565b91600052602060002090600402016000849091909150600082015181600001556020820151816001019080519060200190620002e2929190620004bb565b506040820151816002015560608201518160030160006101000a81548160ff021916908360ff16021790555050505060a06040519081016040528060008152602001600081526020016000815260200160008152602001600060ff168152509050600a805480600101828162000359919062000542565b916000526020600020906005020160008390919091506000820151816000015560208201518160010155604082015181600201556060820151816003015560808201518160040160006101000a81548160ff021916908360ff160217905550505050620003e16001600954620003ef64010000000002620028d9179091906401000000009004565b6009819055505050620006ad565b60008082840190508381101515156200040457fe5b8091505092915050565b608060405190810160405280600081526020016200042b62000577565b815260200160008152602001600060ff1681525090565b60a06040519081016040528060008152602001600081526020016000815260200160008152602001600060ff1681525090565b604051610210806200332983390190565b815481835581811511620004b657600402816004028360005260206000209182019101620004b591906200058b565b5b505050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620004fe57805160ff19168380011785556200052f565b828001600101855582156200052f579182015b828111156200052e57825182559160200191906001019062000511565b5b5090506200053e9190620005e3565b5090565b81548183558181151162000572576005028160050283600052602060002091820191016200057191906200060b565b5b505050565b602060405190810160405280600081525090565b620005e091905b80821115620005dc57600080820160009055600182016000620005b6919062000661565b60028201600090556003820160006101000a81549060ff02191690555060040162000592565b5090565b90565b6200060891905b8082111562000604576000816000905550600101620005ea565b5090565b90565b6200065e91905b808211156200065a576000808201600090556001820160009055600282016000905560038201600090556004820160006101000a81549060ff02191690555060050162000612565b5090565b90565b50805460018160011615610100020316600290046000825580601f10620006895750620006aa565b601f016020900490600052602060002090810190620006a99190620005e3565b5b50565b612c6c80620006bd6000396000f3006060604052600436106101c2576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680630519ce79146101c75780630a0f81681461021c57806313bea5ab1461027157806313edec84146102e4578063163e0f46146103445780631785f53c146103a457806327d7874c146103dd5780632ba73c1514610416578063347cdb151461044f5780633f4ba83a146104785780633f69babd1461048d57806341b2485b146104b057806345243120146105055780634e0a33791461053e5780635398a62c146105775780635c975abb1461059a57806366008bfb146105c757806367dd74ca146105f05780636af04a57146106085780636d1884e01461065d57806370a082311461071b578063715879881461076857806375774100146107a15780638456cb59146107c457806384abfd16146107d95780638da5cb5b146108105780638f4332de1461086557806399c9f474146108ce578063b00bd08b14610924578063b047fb501461094d578063c219c40f146109a2578063d0c494db146109db578063d6b3eeef14610a12578063d9e48f5c14610a3e578063f2fde38b14610a67578063f35ec83014610aa0575b600080fd5b34156101d257600080fd5b6101da610ae1565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561022757600080fd5b61022f610b07565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561027c57600080fd5b6102e260048080359060200190919080359060200190820180359060200191909192908035906020019082018035906020019190919290803590602001908201803590602001919091929080359060200190820180359060200191909192905050610b2d565b005b34156102ef57600080fd5b6103056004808035906020019091905050610db5565b604051808781526020018681526020018581526020018481526020018381526020018260ff1660ff168152602001965050505050505060405180910390f35b341561034f57600080fd5b6103656004808035906020019091905050610df5565b604051808781526020018681526020018581526020018481526020018381526020018260ff1660ff168152602001965050505050505060405180910390f35b34156103af57600080fd5b6103db600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610e5c565b005b34156103e857600080fd5b610414600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610f13565b005b341561042157600080fd5b61044d600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610fef565b005b341561045a57600080fd5b6104626110cb565b6040518082815260200191505060405180910390f35b341561048357600080fd5b61048b611186565b005b341561049857600080fd5b6104ae6004808035906020019091905050611244565b005b34156104bb57600080fd5b6104c361133f565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561051057600080fd5b61053c600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050611365565b005b341561054957600080fd5b610575600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050611446565b005b341561058257600080fd5b6105986004808035906020019091905050611522565b005b34156105a557600080fd5b6105ad61160c565b604051808215151515815260200191505060405180910390f35b34156105d257600080fd5b6105da61161f565b6040518082815260200191505060405180910390f35b610606600480803590602001909190505061162f565b005b341561061357600080fd5b61061b61196b565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561066857600080fd5b61067e6004808035906020019091905050611991565b60405180868152602001806020018560ff1660ff168152602001848152602001838152602001828103825286818151815260200191508051906020019080838360005b838110156106dc5780820151818401526020810190506106c1565b50505050905090810190601f1680156107095780820380516001836020036101000a031916815260200191505b50965050505050505060405180910390f35b341561072657600080fd5b610752600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050611b13565b6040518082815260200191505060405180910390f35b341561077357600080fd5b61079f600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050611b5f565b005b34156107ac57600080fd5b6107c26004808035906020019091905050611c7d565b005b34156107cf57600080fd5b6107d7611fa3565b005b34156107e457600080fd5b6107fa6004808035906020019091905050612063565b6040518082815260200191505060405180910390f35b341561081b57600080fd5b61082361212b565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561087057600080fd5b61088f6004808035906020019091908035906020019091905050612150565b604051808781526020018681526020018581526020018481526020018381526020018260ff1660ff168152602001965050505050505060405180910390f35b34156108d957600080fd5b61090e600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919080359060200190919050506121a9565b6040518082815260200191505060405180910390f35b341561092f57600080fd5b610937612271565b6040518082815260200191505060405180910390f35b341561095857600080fd5b61096061232e565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34156109ad57600080fd5b6109d9600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050612354565b005b34156109e657600080fd5b610a1060048080359060200190919080359060200190820180359060200191909192905050612447565b005b3415610a1d57600080fd5b610a3c60048080359060200190919080359060200190919050506124eb565b005b3415610a4957600080fd5b610a51612591565b6040518082815260200191505060405180910390f35b3415610a7257600080fd5b610a9e600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919050506125b1565b005b3415610aab57600080fd5b610adf600480803590602001909190803590602001909190803590602001909190803560ff16906020019091905050612706565b005b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b610b35612910565b600080428c111515610b4657600080fd5b600089899050118015610b5e57508686905089899050145b8015610b6f57508484905089899050145b1515610b7a57600080fd5b6080604051908101604052808d81526020018c8c8080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050815260200160008152602001600060ff1681525092506001600b8054806001018281610beb9190612942565b91600052602060002090600402016000869091909150600082015181600001556020820151816001019080519060200190610c27929190612974565b506040820151816002015560608201518160030160006101000a81548160ff021916908360ff160217905550505003915033600e600084815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507f263b8c982895fbe8f474fd5750a94f9bc7df584aad4f354ed2aef8c32ab8423c828d8d8d3360405180868152602001858152602001806020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182810382528585828181526020019250808284378201915050965050505050505060405180910390a1600090505b88889050811015610da757610d9a828a8a848181101515610d6157fe5b905060200201358989858181101515610d7657fe5b905060200201358888868181101515610d8b57fe5b9050602002013560ff16612706565b8080600101915050610d44565b505050505050505050505050565b6000806000806000806000600d6000898152602001908152602001600020549050610ddf81610df5565b9650965096509650965096505091939550919395565b6000806000806000806000600a88815481101515610e0f57fe5b90600052602060002090600502019050879650806000015495508060010154945080600201549350806003015492508060040160009054906101000a900460ff1691505091939550919395565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610eb857600080fd5b6000600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610f6f57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151515610fab57600080fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561104b57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415151561108757600080fd5b80600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16630c560c64600080604051602001526040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180828152602001915050602060405180830381600087803b151561116657600080fd5b6102c65a03f1151561117757600080fd5b50505060405180519050905090565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156111e157600080fd5b600060149054906101000a900460ff1615156111fc57600080fd5b60008060146101000a81548160ff0219169083151502179055507f7805862f689e2f13df9f062ff482ad3ad112aca9e0847911ed832e158c525b3360405160405180910390a1565b6000813373ffffffffffffffffffffffffffffffffffffffff16600e600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415156112b457600080fd5b600b838154811015156112c357fe5b906000526020600020906004020191504282600001541115156112e557600080fd5b60018260030160006101000a81548160ff021916908360ff1602179055507f14b51db3bb73d9fc2f73ef9a292fe180b35b0ac1d9285a7520e01b7e05b91bf8836040518082815260200191505060405180910390a1505050565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156113c157600080fd5b80600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156114a257600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141515156114de57600080fd5b80600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000813373ffffffffffffffffffffffffffffffffffffffff16600e600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614151561159257600080fd5b600b838154811015156115a157fe5b906000526020600020906004020191504282600001541115156115c357600080fd5b3373ffffffffffffffffffffffffffffffffffffffff166108fc83600201549081150290604051600060405180830381858888f19350505050151561160757600080fd5b505050565b600060149054906101000a900460ff1681565b60006001600a8054905003905090565b600080600080600a8581548110151561164457fe5b90600052602060002090600502019350600084600001541415151561166857600080fd5b42600b856000015481548110151561167c57fe5b90600052602060002090600402016000015411151561169a57600080fd5b600084600301541115156116ad57600080fd5b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16630c560c646008546000604051602001526040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180828152602001915050602060405180830381600087803b151561174857600080fd5b6102c65a03f1151561175957600080fd5b505050604051805190508460010154023414151561177657600080fd5b600b846000015481548110151561178957fe5b906000526020600020906004020192506117b4846001015484600201546128d990919063ffffffff16565b83600201819055506117d4600185600301546128f790919063ffffffff16565b8460030181905550600954915033600f600084815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555084600d60008481526020019081526020016000208190555061185433611b13565b9050601060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002080548060010182816118a791906129f4565b916000526020600020900160006009549091909150555080601160006009548152602001908152602001600020819055506118ee60016009546128d990919063ffffffff16565b6009819055507f23185667fbe4fe155ce70ec5978bcaaccf7b774f88cfb256ddef7d092c92e02160016009540333604051808381526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019250505060405180910390a15050505050565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600061199b612a20565b600080600080600073ffffffffffffffffffffffffffffffffffffffff16600e600089815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614151515611a1057600080fd5b600b87815481101515611a1f57fe5b9060005260206000209060040201905080600001549550806001018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015611ace5780601f10611aa357610100808354040283529160200191611ace565b820191906000526020600020905b815481529060010190602001808311611ab157829003601f168201915b505050505094508060030160009054906101000a900460ff169350600c6000888152602001908152602001600020805490509250806002015491505091939590929450565b6000601060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805490509050919050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611bbb57600080fd5b600060149054906101000a900460ff161515611bd657600080fd5b80600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507f450db8da6efbe9c22f2347f7c2021231df1fc58d3ae9a2fa75d39fa44619930581604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390a150565b600080823373ffffffffffffffffffffffffffffffffffffffff16600f600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141515611cee57600080fd5b600a600d600086815260200190815260200160002054815481101515611d1057fe5b90600052602060002090600502019250600b8360000154815481101515611d3357fe5b9060005260206000209060040201915060018260030160009054906101000a900460ff1660ff161480611d7a575060018360040160009054906101000a900460ff1660ff16145b1515611d8557600080fd5b611d9d600184600301546128d990919063ffffffff16565b8360030181905550611dc0836001015483600201546128f790919063ffffffff16565b82600201819055506000600f600086815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000601060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206011600087815260200190815260200160002054815481101515611e7c57fe5b906000526020600020900181905550600060116000868152602001908152602001600020819055503373ffffffffffffffffffffffffffffffffffffffff166108fc600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16630c560c64600080604051602001526040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180828152602001915050602060405180830381600087803b1515611f5757600080fd5b6102c65a03f11515611f6857600080fd5b505050604051805190508560010154029081150290604051600060405180830381858888f193505050501515611f9d57600080fd5b50505050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611ffe57600080fd5b600060149054906101000a900460ff1615151561201a57600080fd5b6001600060146101000a81548160ff0219169083151502179055507f6985a02210a168e66602d3235cb6db0e70f92b3ba4d376a33c0f3d9434bff62560405160405180910390a1565b600080600073ffffffffffffffffffffffffffffffffffffffff16600e600085815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141515156120d557600080fd5b600090505b600a805490508110156121255782600a828154811015156120f757fe5b90600052602060002090600502016000015414156121185781806001019250505b80806001019150506120da565b50919050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000806000806000806000600c60008a81526020019081526020016000208881548110151561217b57fe5b906000526020600020900154905061219281610df5565b965096509650965096509650509295509295509295565b600080601060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020838154811015156121f857fe5b9060005260206000209001541415151561221157600080fd5b601060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208281548110151561225d57fe5b906000526020600020900154905092915050565b6000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16630c560c646008546000604051602001526040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180828152602001915050602060405180830381600087803b151561230e57600080fd5b6102c65a03f1151561231f57600080fd5b50505060405180519050905090565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156123b057600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141515156123ec57600080fd5b6001600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555050565b823373ffffffffffffffffffffffffffffffffffffffff16600e600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415156124b557600080fd5b8282600b868154811015156124c657fe5b906000526020600020906004020160010191906124e4929190612a34565b5050505050565b813373ffffffffffffffffffffffffffffffffffffffff16600e600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614151561255957600080fd5b428211151561256757600080fd5b81600b8481548110151561257757fe5b906000526020600020906004020160000181905550505050565b60006125ac6001600b805490506128f790919063ffffffff16565b905090565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561260c57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415151561264857600080fd5b8073ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b61270e612ab4565b600080863373ffffffffffffffffffffffffffffffffffffffff16600e600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614151561277f57600080fd5b60008611151561278e57600080fd5b60a0604051908101604052808981526020018881526020018781526020018781526020018660ff168152509350600a80548060010182816127cf9190612ae7565b916000526020600020906005020160008690919091506000820151816000015560208201518160010155604082015181600201556060820151816003015560808201518160040160006101000a81548160ff021916908360ff16021790555050509250600183039150600c6000898152602001908152602001600020805480600101828161285d91906129f4565b9160005260206000209001600084909190915055507f89f4233ba7e97c17d7d7f16839572d206d5298b07835eaa666b1bb2b715c8a328289898989604051808681526020018581526020018481526020018381526020018260ff1660ff1681526020019550505050505060405180910390a15050505050505050565b60008082840190508381101515156128ed57fe5b8091505092915050565b600082821115151561290557fe5b818303905092915050565b6080604051908101604052806000815260200161292b612b19565b815260200160008152602001600060ff1681525090565b81548183558181151161296f5760040281600402836000526020600020918201910161296e9190612b2d565b5b505050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106129b557805160ff19168380011785556129e3565b828001600101855582156129e3579182015b828111156129e25782518255916020019190600101906129c7565b5b5090506129f09190612b80565b5090565b815481835581811511612a1b57818360005260206000209182019101612a1a9190612b80565b5b505050565b602060405190810160405280600081525090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10612a7557803560ff1916838001178555612aa3565b82800160010185558215612aa3579182015b82811115612aa2578235825591602001919060010190612a87565b5b509050612ab09190612b80565b5090565b60a06040519081016040528060008152602001600081526020016000815260200160008152602001600060ff1681525090565b815481835581811511612b1457600502816005028360005260206000209182019101612b139190612ba5565b5b505050565b602060405190810160405280600081525090565b612b7d91905b80821115612b7957600080820160009055600182016000612b549190612bf8565b60028201600090556003820160006101000a81549060ff021916905550600401612b33565b5090565b90565b612ba291905b80821115612b9e576000816000905550600101612b86565b5090565b90565b612bf591905b80821115612bf1576000808201600090556001820160009055600282016000905560038201600090556004820160006101000a81549060ff021916905550600501612bab565b5090565b90565b50805460018160011615610100020316600290046000825580601f10612c1e5750612c3d565b601f016020900490600052602060002090810190612c3c9190612b80565b5b505600a165627a7a72305820b845e56aeb3a665a54798b25029833a833e7c4d938e64dd96313e49c31c6ede300296060604052341561000f57600080fd5b6101f28061001e6000396000f30060606040526004361061006d576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680630c560c64146100725780635a8ef28a146100a957806367f01c04146100e0578063c818faec14610117578063d67ae54d1461014e575b600080fd5b341561007d57600080fd5b6100936004808035906020019091905050610185565b6040518082815260200191505060405180910390f35b34156100b457600080fd5b6100ca6004808035906020019091905050610192565b6040518082815260200191505060405180910390f35b34156100eb57600080fd5b610101600480803590602001909190505061019f565b6040518082815260200191505060405180910390f35b341561012257600080fd5b61013860048080359060200190919050506101ac565b6040518082815260200191505060405180910390f35b341561015957600080fd5b61016f60048080359060200190919050506101b9565b6040518082815260200191505060405180910390f35b6000816001019050919050565b6000816001019050919050565b6000816001019050919050565b6000816001019050919050565b60008160010190509190505600a165627a7a72305820178ec213093b7145082de77f2149c60d18af3765618c83ca959ba42df7500fca0029";

    protected static final HashMap<String, String> _addresses;

    static {
        _addresses = new HashMap<>();
        _addresses.put("5777", "0x345ca3e014aaf5dca488057592ee47305d9b3e10");
    }

    protected SmartTickets(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected SmartTickets(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public List<EventCreationEventResponse> getEventCreationEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("EventCreation", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<DynamicBytes>() {}, new TypeReference<Address>() {}));
        List<EventValues> valueList = extractEventParameters(event, transactionReceipt);
        ArrayList<EventCreationEventResponse> responses = new ArrayList<EventCreationEventResponse>(valueList.size());
        for (EventValues eventValues : valueList) {
            EventCreationEventResponse typedResponse = new EventCreationEventResponse();
            typedResponse.id = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.date = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.metaDescriptionHash = (byte[]) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.creator = (String) eventValues.getNonIndexedValues().get(3).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<EventCreationEventResponse> eventCreationEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("EventCreation", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<DynamicBytes>() {}, new TypeReference<Address>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, EventCreationEventResponse>() {
            @Override
            public EventCreationEventResponse call(Log log) {
                EventValues eventValues = extractEventParameters(event, log);
                EventCreationEventResponse typedResponse = new EventCreationEventResponse();
                typedResponse.id = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.date = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.metaDescriptionHash = (byte[]) eventValues.getNonIndexedValues().get(2).getValue();
                typedResponse.creator = (String) eventValues.getNonIndexedValues().get(3).getValue();
                return typedResponse;
            }
        });
    }

    public List<EventCancelationEventResponse> getEventCancelationEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("EventCancelation", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        List<EventValues> valueList = extractEventParameters(event, transactionReceipt);
        ArrayList<EventCancelationEventResponse> responses = new ArrayList<EventCancelationEventResponse>(valueList.size());
        for (EventValues eventValues : valueList) {
            EventCancelationEventResponse typedResponse = new EventCancelationEventResponse();
            typedResponse.id = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<EventCancelationEventResponse> eventCancelationEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("EventCancelation", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, EventCancelationEventResponse>() {
            @Override
            public EventCancelationEventResponse call(Log log) {
                EventValues eventValues = extractEventParameters(event, log);
                EventCancelationEventResponse typedResponse = new EventCancelationEventResponse();
                typedResponse.id = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public List<TicketTypeCreationEventResponse> getTicketTypeCreationEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("TicketTypeCreation", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint8>() {}));
        List<EventValues> valueList = extractEventParameters(event, transactionReceipt);
        ArrayList<TicketTypeCreationEventResponse> responses = new ArrayList<TicketTypeCreationEventResponse>(valueList.size());
        for (EventValues eventValues : valueList) {
            TicketTypeCreationEventResponse typedResponse = new TicketTypeCreationEventResponse();
            typedResponse.ticketTypeId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.eventId = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.price = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.supply = (BigInteger) eventValues.getNonIndexedValues().get(3).getValue();
            typedResponse.refundable = (BigInteger) eventValues.getNonIndexedValues().get(4).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<TicketTypeCreationEventResponse> ticketTypeCreationEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("TicketTypeCreation", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint8>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, TicketTypeCreationEventResponse>() {
            @Override
            public TicketTypeCreationEventResponse call(Log log) {
                EventValues eventValues = extractEventParameters(event, log);
                TicketTypeCreationEventResponse typedResponse = new TicketTypeCreationEventResponse();
                typedResponse.ticketTypeId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.eventId = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.price = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
                typedResponse.supply = (BigInteger) eventValues.getNonIndexedValues().get(3).getValue();
                typedResponse.refundable = (BigInteger) eventValues.getNonIndexedValues().get(4).getValue();
                return typedResponse;
            }
        });
    }

    public List<TicketPurchaseEventResponse> getTicketPurchaseEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("TicketPurchase", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Address>() {}));
        List<EventValues> valueList = extractEventParameters(event, transactionReceipt);
        ArrayList<TicketPurchaseEventResponse> responses = new ArrayList<TicketPurchaseEventResponse>(valueList.size());
        for (EventValues eventValues : valueList) {
            TicketPurchaseEventResponse typedResponse = new TicketPurchaseEventResponse();
            typedResponse.ticketId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.buyer = (String) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<TicketPurchaseEventResponse> ticketPurchaseEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("TicketPurchase", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Address>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, TicketPurchaseEventResponse>() {
            @Override
            public TicketPurchaseEventResponse call(Log log) {
                EventValues eventValues = extractEventParameters(event, log);
                TicketPurchaseEventResponse typedResponse = new TicketPurchaseEventResponse();
                typedResponse.ticketId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.buyer = (String) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public List<WithdrawalEventResponse> getWithdrawalEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("Withdrawal", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        List<EventValues> valueList = extractEventParameters(event, transactionReceipt);
        ArrayList<WithdrawalEventResponse> responses = new ArrayList<WithdrawalEventResponse>(valueList.size());
        for (EventValues eventValues : valueList) {
            WithdrawalEventResponse typedResponse = new WithdrawalEventResponse();
            typedResponse.to = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<WithdrawalEventResponse> withdrawalEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("Withdrawal", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, WithdrawalEventResponse>() {
            @Override
            public WithdrawalEventResponse call(Log log) {
                EventValues eventValues = extractEventParameters(event, log);
                WithdrawalEventResponse typedResponse = new WithdrawalEventResponse();
                typedResponse.to = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public List<ContractUpgradeEventResponse> getContractUpgradeEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("ContractUpgrade", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        List<EventValues> valueList = extractEventParameters(event, transactionReceipt);
        ArrayList<ContractUpgradeEventResponse> responses = new ArrayList<ContractUpgradeEventResponse>(valueList.size());
        for (EventValues eventValues : valueList) {
            ContractUpgradeEventResponse typedResponse = new ContractUpgradeEventResponse();
            typedResponse.newContract = (String) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<ContractUpgradeEventResponse> contractUpgradeEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("ContractUpgrade", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, ContractUpgradeEventResponse>() {
            @Override
            public ContractUpgradeEventResponse call(Log log) {
                EventValues eventValues = extractEventParameters(event, log);
                ContractUpgradeEventResponse typedResponse = new ContractUpgradeEventResponse();
                typedResponse.newContract = (String) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public List<PauseEventResponse> getPauseEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("Pause", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList());
        List<EventValues> valueList = extractEventParameters(event, transactionReceipt);
        ArrayList<PauseEventResponse> responses = new ArrayList<PauseEventResponse>(valueList.size());
        for (EventValues eventValues : valueList) {
            PauseEventResponse typedResponse = new PauseEventResponse();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<PauseEventResponse> pauseEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("Pause", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList());
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, PauseEventResponse>() {
            @Override
            public PauseEventResponse call(Log log) {
                EventValues eventValues = extractEventParameters(event, log);
                PauseEventResponse typedResponse = new PauseEventResponse();
                return typedResponse;
            }
        });
    }

    public List<UnpauseEventResponse> getUnpauseEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("Unpause", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList());
        List<EventValues> valueList = extractEventParameters(event, transactionReceipt);
        ArrayList<UnpauseEventResponse> responses = new ArrayList<UnpauseEventResponse>(valueList.size());
        for (EventValues eventValues : valueList) {
            UnpauseEventResponse typedResponse = new UnpauseEventResponse();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<UnpauseEventResponse> unpauseEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("Unpause", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList());
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, UnpauseEventResponse>() {
            @Override
            public UnpauseEventResponse call(Log log) {
                EventValues eventValues = extractEventParameters(event, log);
                UnpauseEventResponse typedResponse = new UnpauseEventResponse();
                return typedResponse;
            }
        });
    }

    public List<OwnershipTransferredEventResponse> getOwnershipTransferredEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("OwnershipTransferred", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList());
        List<EventValues> valueList = extractEventParameters(event, transactionReceipt);
        ArrayList<OwnershipTransferredEventResponse> responses = new ArrayList<OwnershipTransferredEventResponse>(valueList.size());
        for (EventValues eventValues : valueList) {
            OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
            typedResponse.previousOwner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.newOwner = (String) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<OwnershipTransferredEventResponse> ownershipTransferredEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("OwnershipTransferred", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList());
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, OwnershipTransferredEventResponse>() {
            @Override
            public OwnershipTransferredEventResponse call(Log log) {
                EventValues eventValues = extractEventParameters(event, log);
                OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
                typedResponse.previousOwner = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.newOwner = (String) eventValues.getIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public RemoteCall<String> cfoAddress() {
        Function function = new Function("cfoAddress", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<String> ceoAddress() {
        Function function = new Function("ceoAddress", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<TransactionReceipt> removeAdmin(String _organizer) {
        Function function = new Function(
                "removeAdmin", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_organizer)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> setCEO(String _newCEO) {
        Function function = new Function(
                "setCEO", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_newCEO)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> setCOO(String _newCOO) {
        Function function = new Function(
                "setCOO", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_newCOO)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> unpause() {
        Function function = new Function(
                "unpause", 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<String> fiatContract() {
        Function function = new Function("fiatContract", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<TransactionReceipt> setCFO(String _newCFO) {
        Function function = new Function(
                "setCFO", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_newCFO)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<Boolean> paused() {
        Function function = new Function("paused", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteCall<String> newContractAddress() {
        Function function = new Function("newContractAddress", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<TransactionReceipt> setNewAddress(String _v2Address) {
        Function function = new Function(
                "setNewAddress", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_v2Address)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> pause() {
        Function function = new Function(
                "pause", 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<String> owner() {
        Function function = new Function("owner", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<String> cooAddress() {
        Function function = new Function("cooAddress", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<TransactionReceipt> addEventCreators(String _organizer) {
        Function function = new Function(
                "addEventCreators", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_organizer)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> transferOwnership(String newOwner) {
        Function function = new Function(
                "transferOwnership", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(newOwner)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public static RemoteCall<SmartTickets> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(SmartTickets.class, web3j, credentials, gasPrice, gasLimit, BINARY, "");
    }

    public static RemoteCall<SmartTickets> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(SmartTickets.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "");
    }

    public RemoteCall<TransactionReceipt> setFiatContractAddress(String _newAddress) {
        Function function = new Function(
                "setFiatContractAddress", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_newAddress)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<BigInteger> balanceOf(String _owner) {
        Function function = new Function("balanceOf", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_owner)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<BigInteger> getTicketIdForOwner(String _owner, BigInteger _index) {
        Function function = new Function("getTicketIdForOwner", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_owner), 
                new org.web3j.abi.datatypes.generated.Uint256(_index)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<BigInteger> getUsdCourse() {
        Function function = new Function("getUsdCourse", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<TransactionReceipt> buyTicket(BigInteger _ticketTypeId, BigInteger weiValue) {
        Function function = new Function(
                "buyTicket", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_ticketTypeId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function, weiValue);
    }

    public RemoteCall<TransactionReceipt> createEvent(BigInteger _date, byte[] _metaDescriptionHash, List<BigInteger> _ticketPricesInUSDCents, List<BigInteger> _ticketSupplies, List<BigInteger> _ticketRefundables) {
        Function function = new Function(
                "createEvent", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_date), 
                new org.web3j.abi.datatypes.DynamicBytes(_metaDescriptionHash), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Uint256>(
                        org.web3j.abi.Utils.typeMap(_ticketPricesInUSDCents, org.web3j.abi.datatypes.generated.Uint256.class)), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Uint256>(
                        org.web3j.abi.Utils.typeMap(_ticketSupplies, org.web3j.abi.datatypes.generated.Uint256.class)), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Uint8>(
                        org.web3j.abi.Utils.typeMap(_ticketRefundables, org.web3j.abi.datatypes.generated.Uint8.class))), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> addTicketForEvent(BigInteger _eventId, BigInteger _priceInUSDCents, BigInteger _initialSupply, BigInteger _refundable) {
        Function function = new Function(
                "addTicketForEvent", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_eventId), 
                new org.web3j.abi.datatypes.generated.Uint256(_priceInUSDCents), 
                new org.web3j.abi.datatypes.generated.Uint256(_initialSupply), 
                new org.web3j.abi.datatypes.generated.Uint8(_refundable)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> refundTicket(BigInteger _ticketId) {
        Function function = new Function(
                "refundTicket", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_ticketId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> cancelEvent(BigInteger _eventId) {
        Function function = new Function(
                "cancelEvent", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_eventId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> withdrawalEarningsForEvent(BigInteger _eventId) {
        Function function = new Function(
                "withdrawalEarningsForEvent", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_eventId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> changeEventDate(BigInteger _id, BigInteger _date) {
        Function function = new Function(
                "changeEventDate", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_id), 
                new org.web3j.abi.datatypes.generated.Uint256(_date)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> changeEventMetaDescriptionHash(BigInteger _id, byte[] _hash) {
        Function function = new Function(
                "changeEventMetaDescriptionHash", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_id), 
                new org.web3j.abi.datatypes.DynamicBytes(_hash)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<BigInteger> getEventCount() {
        Function function = new Function("getEventCount", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<BigInteger> getTicketTypesCountForEvent(BigInteger _eventId) {
        Function function = new Function("getTicketTypesCountForEvent", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_eventId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<Tuple6<BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger>> getTicketType(BigInteger _ticketTypeId) {
        final Function function = new Function("getTicketType", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_ticketTypeId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint8>() {}));
        return new RemoteCall<Tuple6<BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger>>(
                new Callable<Tuple6<BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger>>() {
                    @Override
                    public Tuple6<BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);;
                        return new Tuple6<BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger>(
                                (BigInteger) results.get(0).getValue(), 
                                (BigInteger) results.get(1).getValue(), 
                                (BigInteger) results.get(2).getValue(), 
                                (BigInteger) results.get(3).getValue(), 
                                (BigInteger) results.get(4).getValue(), 
                                (BigInteger) results.get(5).getValue());
                    }
                });
    }

    public RemoteCall<Tuple5<BigInteger, byte[], BigInteger, BigInteger, BigInteger>> getEvent(BigInteger _eventId) {
        final Function function = new Function("getEvent", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_eventId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<DynamicBytes>() {}, new TypeReference<Uint8>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        return new RemoteCall<Tuple5<BigInteger, byte[], BigInteger, BigInteger, BigInteger>>(
                new Callable<Tuple5<BigInteger, byte[], BigInteger, BigInteger, BigInteger>>() {
                    @Override
                    public Tuple5<BigInteger, byte[], BigInteger, BigInteger, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);;
                        return new Tuple5<BigInteger, byte[], BigInteger, BigInteger, BigInteger>(
                                (BigInteger) results.get(0).getValue(), 
                                (byte[]) results.get(1).getValue(), 
                                (BigInteger) results.get(2).getValue(), 
                                (BigInteger) results.get(3).getValue(), 
                                (BigInteger) results.get(4).getValue());
                    }
                });
    }

    public RemoteCall<Tuple6<BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger>> getTicketTypeForTicket(BigInteger _ticketId) {
        final Function function = new Function("getTicketTypeForTicket", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_ticketId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint8>() {}));
        return new RemoteCall<Tuple6<BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger>>(
                new Callable<Tuple6<BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger>>() {
                    @Override
                    public Tuple6<BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);;
                        return new Tuple6<BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger>(
                                (BigInteger) results.get(0).getValue(), 
                                (BigInteger) results.get(1).getValue(), 
                                (BigInteger) results.get(2).getValue(), 
                                (BigInteger) results.get(3).getValue(), 
                                (BigInteger) results.get(4).getValue(), 
                                (BigInteger) results.get(5).getValue());
                    }
                });
    }

    public RemoteCall<Tuple6<BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger>> getTicketTypeForEvent(BigInteger _eventId, BigInteger _index) {
        final Function function = new Function("getTicketTypeForEvent", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_eventId), 
                new org.web3j.abi.datatypes.generated.Uint256(_index)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint8>() {}));
        return new RemoteCall<Tuple6<BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger>>(
                new Callable<Tuple6<BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger>>() {
                    @Override
                    public Tuple6<BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);;
                        return new Tuple6<BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger>(
                                (BigInteger) results.get(0).getValue(), 
                                (BigInteger) results.get(1).getValue(), 
                                (BigInteger) results.get(2).getValue(), 
                                (BigInteger) results.get(3).getValue(), 
                                (BigInteger) results.get(4).getValue(), 
                                (BigInteger) results.get(5).getValue());
                    }
                });
    }

    public RemoteCall<BigInteger> getTicketTypeCount() {
        Function function = new Function("getTicketTypeCount", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<BigInteger> getOneUSDCentInWei() {
        Function function = new Function("getOneUSDCentInWei", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public static SmartTickets load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new SmartTickets(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    public static SmartTickets load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new SmartTickets(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected String getStaticDeployedAddress(String networkId) {
        return _addresses.get(networkId);
    }

    public static String getPreviouslyDeployedAddress(String networkId) {
        return _addresses.get(networkId);
    }

    public static class EventCreationEventResponse {
        public BigInteger id;

        public BigInteger date;

        public byte[] metaDescriptionHash;

        public String creator;
    }

    public static class EventCancelationEventResponse {
        public BigInteger id;
    }

    public static class TicketTypeCreationEventResponse {
        public BigInteger ticketTypeId;

        public BigInteger eventId;

        public BigInteger price;

        public BigInteger supply;

        public BigInteger refundable;
    }

    public static class TicketPurchaseEventResponse {
        public BigInteger ticketId;

        public String buyer;
    }

    public static class WithdrawalEventResponse {
        public BigInteger to;

        public BigInteger amount;
    }

    public static class ContractUpgradeEventResponse {
        public String newContract;
    }

    public static class PauseEventResponse {
    }

    public static class UnpauseEventResponse {
    }

    public static class OwnershipTransferredEventResponse {
        public String previousOwner;

        public String newOwner;
    }
}
